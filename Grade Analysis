
#include <stdio.h>
#include <stdlib.h>

typedef struct 
{
    int student_ID;
    int mid_grd;
    int exam_grd;
    float final_grd;
}student;

student **create_class_list(int *sizePtr); //prototypes
int find (int idNo, student **list, int size);
void input_grades (student **list, int size);
void compute_final_course_marks(student **list, int size);
void output_final_course_mark(student **list, int size);
void print_backwards(student **list, int size);
int withdraw(int idNo, student **list, int size);
void destroy_list(student **list, int size);

void destroy_single(student *list);

int main()
{
    int size, i=0;
    student **classlist;
    
    classlist = create_class_list(&size);
    printf("Class size = %d", size);
 
    printf("\n\n1020 is at index: %d\n\n", find(1020,classlist,size));
    
    printf("The student lists are: \n");
    input_grades(classlist,size);
    printf("\n");
    
    printf("The students' final marks are: \n");
    compute_final_course_marks(classlist,size);
    
    output_final_course_mark(classlist,size);
    printf("\n");
    
    printf("The list printed backwards is: ");
    print_backwards(classlist, size);
    
    withdraw(1002, classlist, size);
    withdraw(1040, classlist, size);
    withdraw(1045, classlist, size-1);
    printf("\n");
    
    destroy_list(classlist, size-2);
    for (i=0; i<size-2; i++)        
        printf("%d\n", classlist[i]->student_ID);
}


student **create_class_list(int *sizePtr)
{
    FILE *input_file=fopen("id.txt", "r");
    fscanf(input_file, "%d", sizePtr);          //sizePtr points to the number of students
    int i=0, temp;
    student **theStudents;                       //initialize a list of lists of type student
    theStudents = (student**) calloc(*sizePtr, sizeof(student*));       //allocate memory for number of student
    for (i=0; i< *sizePtr; i++)
    {
        theStudents[i] = (student*) calloc(1,sizeof(student));          //allocate memory for data for each student
        fscanf(input_file,"%d", &(theStudents[i]->student_ID));     
    }
    return theStudents;        
}

int find (int idNo, student **list, int size)
{
    int middle=0, low=0, high=size-1, i;
    while (low<=high)
    {
        middle = (low+high)/2;
        if (idNo == list[middle]->student_ID)           //if the student id in the MIDDLE equals the correct id
            return middle;
        if (list[middle]->student_ID < idNo)            //if the MIDDLE id is less than the correct id
            low = middle+1;                             //the correct id has to be in the greater half of the list
        else
            high = middle -1;            
    }
    return -1;
}

void input_grades (student **list, int size)
{
    FILE *file = fopen("grades.txt", "r");
    int i=0, index=0, id=0, midgrd=0, examgrd=0;
    for (i=0; i<size; i++)
    {
        fscanf(file, "%d", &id);                //stores first id in a variable
        index = find (id,list,size);            //search for index of the id's list, store in variable index
        fscanf(file, "%d", &midgrd);            //store next numbers in midgrd and examgrd
        fscanf(file, "%d", &examgrd);
        list[index]->mid_grd = midgrd;          //store midgrade and examgrade in correct student list         
        list[index]->exam_grd = examgrd;
    }
    for (i=0; i<size; i++)
        printf("%d %d %d\n",list[i]->student_ID,list[i]->mid_grd, list[i]->exam_grd);
}

void compute_final_course_marks(student **list, int size)
{
    int i=0;
    for (i=0; i<size; i++)
    {        
        (list[i]->final_grd) = (0.3*(list[i]->mid_grd))+(0.7*(list[i]->exam_grd));
        printf("%d %f\n", list[i]->student_ID,list[i]->final_grd);
    }
}

void output_final_course_mark(student **list, int size)
{
    FILE *foutput = fopen("course_marks.txt", "w");
    int i=0;
    for (i=0; i<size; i++)
    {
        fprintf(foutput, "%d ", list[i]->student_ID);
        fprintf(foutput, "%f\r\n", list[i]->final_grd);
    }
}

void print_backwards(student **list, int size)
{
    int i=size-1;
    if (i>=0)
    {
        printf("%d, ", list[i]->student_ID);
        print_backwards(list, i);               //i = i-1 when function executes again
    }
}

int withdraw(int idNo, student **list, int size)
{
    int i=0, j=0, count=0;
    for (i=0; i<size; i++)
    {
        if (list[i]->student_ID == idNo)        //if student id is in the list
        {
            list[i]->student_ID = 0;    //set student id to 0
            free(list[i]);              //free memory of that student
            for (i; i<size-1; i++)      
            {                
                list[i] = list[i+1];    //lists are shifted by one position
            }
            list[size-1]=NULL;          //last list points to NULL
            printf("\n");
            for (i=0; i<size-1; i++)
                printf("%d\n", list[i]->student_ID);
            count++;            
            return count;               //return 1
            break;
        }        
    }
    printf("\n\n");
    printf("The student is not in the class.\n\n");
    return count;                       //return 0 if student is not found
}

void destroy_list(student **list, int size)
{
    int i=0;
//    list = (student**) calloc(size, sizeof(student));
    for (i=size-1; i>=0; i--)
        free(list[i]);          //free each student list (deallocate memory)
    free(list);
}

//void destroy_single(student *list)
//{
//    free(&(list->student_ID));
//    free(&(list->mid_grd));
//    free(&(list->exam_grd));
//    free(&(list->final_grd));
//    free(&list);
//}
